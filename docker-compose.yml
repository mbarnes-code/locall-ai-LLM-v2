version: '3.8'

volumes:
  n8n_storage:
  ollama_storage:
  chroma_data:
  postgres_data:
  agent_data:
  redis_data:
  prometheus_data:
  grafana_data:
  frontend_data:
  backend_data:

networks:
  demo:
    driver: bridge

services:
  n8n:
    image: n8nio/n8n
    environment:
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    volumes:
      - n8n_storage:/root/.n8n
    networks:
      - demo

  chroma:
    image: chromadb/chroma:latest
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS=admin:admin
      - CHROMA_SERVER_AUTH_PROVIDER=basic
      - ALLOW_RESET=true
    restart: always
    networks:
      - demo

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_storage:/root/.ollama
    networks:
      - demo

  redis:
    image: redis:latest
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - demo

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/etc/prometheus
    networks:
      - demo
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - demo
    ports:
      - "3001:3000"

  crawl4ai:
    image: crawl4ai/crawl4ai:latest
    networks:
      - demo

  unstract:
    image: unstract/unstract:latest
    networks:
      - demo

  # Backend service (Django)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
    - DJANGO_SETTINGS_MODULE=myproject.settings
    - DB_NAME=${DB_NAME}
    - DB_USER=${DB_USER}
    - DB_PASSWORD=${DB_PASSWORD}
    - DB_HOST=${DB_HOST}
    - DB_PORT=${DB_PORT}
    - REDIS_URL=${REDIS_URL}
    - DEBUG=${DEBUG}
    - SECRET_KEY=${SECRET_KEY}  # This pulls the value from the .env file
    env_file:
    - .env  # This loads the environment variables
    volumes:
      - backend_data:/app
    ports:
      - "8000:8000"
    networks:
      - demo
    depends_on:
      - db
      - redis

  # Frontend service (React + Nginx)
  frontend:
    build:
      context: ./frontend  # Path to the frontend folder
      dockerfile: Dockerfile  # Dockerfile for frontend (React + Nginx)
    volumes:
      - frontend_data:/app
    ports:
      - "80:80"  # Exposing frontend port (served by Nginx)
    networks:
      - demo
    depends_on:
      - backend  # Ensure frontend waits for the backend to start

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: spellbook_db_test
    restart: always
    networks:
      - demo

  unified_ai_agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    environment:
      - PORT=8001
      - CMD_TO_RUN="uvicorn unified_ai_agent:app --host 0.0.0.0 --port ${PORT} --reload"
      - CHROMA_SERVER_HOST=chroma
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_AUTH_CREDENTIALS=admin:admin
      - CHROMA_SERVER_AUTH_PROVIDER=basic
    ports:
      - "8001:8001"
    networks:
      - demo
    depends_on:
      chroma:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - agent_data:/app/data
